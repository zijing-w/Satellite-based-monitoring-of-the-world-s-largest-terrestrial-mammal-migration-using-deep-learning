# -*- coding: utf-8 -*-
"""data_augmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g_Wmx-ZxdtE9O146mUSSpsllVMt_Vsdn
"""

import numpy as np
import imgaug.augmenters as iaa

#Define data augmentation functions: flip up and down; linear contrast; and rotate 90 degrees
seq_flipud = iaa.Sequential([
    iaa.Flipud(1),
])
seq_contrast = iaa.Sequential([
    iaa.LinearContrast(alpha=1.6, per_channel=True)                           
])
seq_fliplr = iaa.Sequential([
    iaa.Fliplr(1)
])
seq_rotate = iaa.Sequential([
    iaa.Affine(rotate=90)
])

#Define data augmentation function
#Given the limited number of training images (only 36), 
#all the augmented images using different augmentation are kept as training images.
#So 36 patches -> 36*4 = 144 patches
def augment_data(Xtrain, Ytrain):


  Xtrain_fliplr = seq_fliplr(images=Xtrain)
  Ytrain_fliplr = seq_fliplr(images=Ytrain)
  Xtrain_flipud = seq_flipud(images=Xtrain)
  Ytrain_flipud = seq_flipud(images=Ytrain)
  Xtrain_rotate = seq_rotate(images=Xtrain)
  Ytrain_rotate = seq_rotate(images=Ytrain)
  
  Xtrain = np.concatenate((Xtrain, Xtrain_fliplr, Xtrain_rotate, Xtrain_flipud), axis=0)
  Ytrain = np.concatenate((Ytrain, Ytrain_fliplr, Ytrain_rotate, Ytrain_flipud), axis=0)
  Xtrain = np.float32(Xtrain)
  Ytrain = np.float32(Ytrain)

  print("There are %i number of augmented training patches" % (Xtrain.shape[0]))
  return Xtrain, Ytrain